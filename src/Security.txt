/*
  * Security.cpp - Library for security.
  * Created by Suresh Kumar, March 29, 2021.
*/

#include "Arduino.h"         // Arduino Library
#include <Preferences.h>     // Preferences Library
#include "Security.h"        // H file for Nvm
#include <WiFi.h>
#include "mbedtls/md.h"

/*
 * Constants 
*/

// Preferences devLoadPreferences;
// DeviceConstants devConstants;

// byte devHmacFullResult[160];
// int devBytePos = 0;  

/*
 * Intilization of Class
 * Intilizes EEPROM with max Size
 * Set the Constant maxMem with max size
*/
Security::Security(int x)
{
    // Constructor
    Serial.println("Iam in Security Constructor");
    devSerialNumberStr = "NOTVALIDSN";
    devActivationCodeStr = "NOTVALIDAC";
    devAwsCodeStr = "NOTVALIDAWSCODE";
    devMobCodeStr = "NOTVALIDMOBCODE";
}

void Security::devGetCode(String devKeyCode) {

  char keyN[12];
  for (int y = 0; y < devKeyCode.length(); y++) {
    keyN[y] = devKeyCode[y];
  }
  keyN[11] = '\0'; 

  char *key = keyN;//"secretKey";
  const char *payload = "soundbarproject20210329";
  byte hmacResult[32];

  mbedtls_md_context_t ctx;
  mbedtls_md_type_t md_type = MBEDTLS_MD_SHA256;

  const size_t payloadLength = strlen(payload);
  const size_t keyLength = strlen(key);            

  mbedtls_md_init(&ctx);
  mbedtls_md_setup(&ctx, mbedtls_md_info_from_type(md_type), 1);
  mbedtls_md_hmac_starts(&ctx, (const unsigned char *) key, keyLength);
  mbedtls_md_hmac_update(&ctx, (const unsigned char *) payload, payloadLength);
  mbedtls_md_hmac_finish(&ctx, hmacResult);
  mbedtls_md_free(&ctx);

  // Serial.print("Hash: ");

  for(int i= 0; i< sizeof(hmacResult); i++){
      // char str[3];

      // sprintf(str, "%02x", (int)hmacResult[i]);
      // Serial.print(str);
      devHmacFullResult[devBytePos] = hmacResult[i];
      devBytePos++;
  }
}

void Security::begin(Preferences devLoadPreferences)
{
    // initialize
    devSerialNumberStr = "NOTVALIDSN";
    devActivationCodeStr = "NOTVALIDAC";
    devAwsCodeStr = "NOTVALIDAWSCODE";
    devMobCodeStr = "NOTVALIDMOBCODE";

    devLoadPreferences.begin("sureshkaval@100", false); //create Partion
    String devFullHash = devLoadPreferences.getString("securityCode");
    devSerialNumberStr = devLoadPreferences.getString("serialNumber");
    devActivationCodeStr = devLoadPreferences.getString("activationCode");    

    // devConstants.putDeviceSerialNumber(devSerialNumberStr);
    // devConstants.putDeviceActivationCode(devActivationCodeStr);

    String devMacID = WiFi.macAddress();
    String devKey1 = "Kavalmirc";
    String devKey2 = "sureshkum";    

    Serial.println();Serial.println("Serial Number   = " + devSerialNumberStr);
    Serial.println("Activation Code = " + devActivationCodeStr);
    // Serial.println("Full hash loaded from Memory = " + devFullHash);

    String devKeyCode1 = devKey1.substring(0, 2) + devSerialNumberStr.substring(0, 2) + devActivationCodeStr.substring(0, 2) + devMacID.substring(1, 2) + devMacID.substring(3, 4) + devKey2.substring(0, 2);
    String devKeyCode5 = devKey1.substring(1, 3) + devSerialNumberStr.substring(1, 3) + devActivationCodeStr.substring(1, 3) + devMacID.substring(1, 2) + devMacID.substring(3, 4) + devKey2.substring(1, 3);
    String devKeyCode2 = devKey1.substring(2, 4) + devSerialNumberStr.substring(2, 4) + devActivationCodeStr.substring(2, 4) + devMacID.substring(3, 4) + devMacID.substring(4, 5) + devKey2.substring(2, 4);
    String devKeyCode3 = devKey1.substring(4, 6) + devSerialNumberStr.substring(6, 8) + devActivationCodeStr.substring(6, 8) + devMacID.substring(6, 7) + devMacID.substring(7, 8) + devKey2.substring(4, 6);
    String devKeyCode4 = devKey1.substring(6, 8) + devSerialNumberStr.substring(8, 10) + devActivationCodeStr.substring(8, 10) + devMacID.substring(9, 10) + devMacID.substring(10, 11) + devKey2.substring(6, 8);

    // // char *payloadr = "Hello HMAC SHA 256!";

    devGetCode(devKeyCode1);
    devGetCode(devKeyCode2);
    devGetCode(devKeyCode3);
    devGetCode(devKeyCode4);
    devGetCode(devKeyCode5);

    // Serial.print("Full Hash2: ");
    String fullHash2 = "";
    for (int i = 0; i < sizeof(devHmacFullResult); i++)
    {
        char str[3];

        sprintf(str, "%02x", (int)devHmacFullResult[i]);
        // Serial.print(str);
        fullHash2 = fullHash2 + str;
    }

    // Serial.println("String of fullHash2 = " + fullHash2);

    //find first Number
    int devPosNumber = 0;
    char devPosChar = 'a';
    for (int z = 0; z < devFullHash.length(); z++)
    {
        devPosChar = devFullHash[z];
        if (devPosChar < 58)
        {          //is poChar a number?
            break; //yes stop
        }
        devPosNumber++;
    }
    int devPosStep = devPosChar - 48;
    if (devPosStep < 5)
    {
        devPosStep = devPosStep + 5;
    }

    int pos = 0;
    String awsReceive = "";
    String mobReceive = "";

    for (int u = 0; u < 24; u++)
    {
        pos = devPosStep + (u * devPosStep);
        fullHash2[pos] = devFullHash[pos];

        //Convert to Big alphabets
        char str[2];
        if (fullHash2[pos] > 64)
        {
            str[0] = fullHash2[pos] - 32; //make it small alphabets
        }
        else
        {
            str[0] = fullHash2[pos]; //if Numbers
        }
        str[1] = '\0';

        if (u < 12)
        {
            awsReceive = awsReceive + str;
        }
        else
        {
            mobReceive = mobReceive + str;
        }
    }

    // Serial.println("fullHash2 after Insertion = " + fullHash2);

    if (devFullHash.length() != fullHash2.length())
    {
        //Error
        awsReceive = "NOTVALIDAWSCODE";
        mobReceive = "NOTVALIDMOBCODE";
        Serial.println("Received AWS = " + awsReceive);
        Serial.println("Received MOB = " + mobReceive);
    }
    else
    {
        if (devFullHash.equals(fullHash2))
        {
            //Sucess
            String tempAwsCode = "DID-" + awsReceive;
            String tempMobCode = "DKY-" + mobReceive;
            Serial.println("AWS Code        = " + tempAwsCode);
            Serial.println("Mobile Code     = " + tempMobCode);
            // devConstants.putDeviceAwsCode(tempAwsCode);
            // devConstants.putDeviceMobCode(tempMobCode);
            devAwsCodeStr = tempAwsCode;
            devMobCodeStr = tempMobCode;
        }
        else
        {
            //Error
            awsReceive = "NOTVALIDAWSCODE";
            mobReceive = "NOTVALIDMOBCODE";
            Serial.println("AWS Code           = " + awsReceive);
            Serial.println("Mobile Code        = " + mobReceive);
        }
    }
}

String Security::getSerialNumber() {
    return devSerialNumberStr;
}

String Security::getActivationCode() {
    return devActivationCodeStr;
}

String Security::getAwsCode() {
    return devAwsCodeStr;
}

String Security::getMobCode() {
    return devMobCodeStr;
}


